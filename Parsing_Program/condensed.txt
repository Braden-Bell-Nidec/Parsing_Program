```python
from openpyxl.chart import PieChart, Reference;from openpyxl.utils.dataframe import dataframe_to_rows;from openpyxl.styles import Alignment;import pandas as pd
def sanitize_sheet_name(sheet_name):invalid_chars = ['\\', '/', '*', '[', ']', ':', '?', ' '];abbreviation_dict = {'Manager' : 'Mgr','Associate': 'Assoc','I': '1','II': '2','III': '3','Information Technology': 'IT','Technician': 'Tech','Mechanical' : 'Mech','Certification' : 'Cert','Senior' : 'Sr.','Human Resources': 'HR','President': 'Pres','Engineer': 'Eng','Operations': 'Op'}
    for word in sheet_name.split():if word in abbreviation_dict:sheet_name = sheet_name.replace(word, abbreviation_dict[word])
    for char in invalid_chars:sheet_name = sheet_name.replace(char, '')
    if sheet_name == "":sheet_name = "Unnamed"
    sheet_name = sheet_name[:31];return sheet_name
def append_dataframe_to_sheet(ws, df, start_row=1, start_col=1):
    for i, row in enumerate(df.values, start=1):
        for j, item in enumerate(row, start=1):
            ws.cell(row=start_row+i-1, column=start_col+j-1, value=item)
    for j, col_name in enumerate(df.columns, start=1):
        ws.cell(row=start_row, column=start_col+j-1, value=col_name)
def create_job_title_sheets_and_charts(df, wb):job_titles = df['JOB_TITLE'].unique()
    for title in job_titles:sanitized_title = sanitize_sheet_name(title);ws = wb.create_sheet(title=sanitized_title);group = df[df['JOB_TITLE'] == title];create_pie_charts(group, ws)
    if 'Sheet' in wb:wb.remove(wb['Sheet'])
def adjust_column_width(sheet, cols_width_dict):for col, width in cols_width_dict.items():sheet.column_dimensions[col].width = width
def align_cells(sheet, cols, alignment):for col in cols:for cell in sheet[col]:cell.alignment = alignment
def create_excel_pie_chart(sheet, df, min_col, max_col, chart_location):chart = PieChart();labels = Reference(sheet, min_col=min_col, min_row=3, max_row=len(df)+2);data = Reference(sheet, min_col=max_col, min_row=2, max_row=len(df)+2);chart.add_data(data, titles_from_data=True);chart.set_categories(labels);chart.title = 'Responsibility Distribution' if min_col==1 else 'Member Of Distribution';sheet.add_chart(chart, chart_location)
def create_pie_charts(df, ws):responsibilities, member_of = get_responsibility_and_member_of_data(df);append_dataframe_to_sheet(ws, responsibilities, start_row=1, start_col=1);adjust_column_width(ws, {'A': 45, 'B': 10});align_cells(ws, ['B'], Alignment(horizontal='center'));create_excel_pie_chart(ws, responsibilities, min_col=1, max_col=2, chart_location="F1");append_dataframe_to_sheet(ws, member_of, start_row=1, start_col=4);adjust_column_width(ws, {'D': 45, 'E': 20});align_cells(ws, ['E'], Alignment(horizontal='center'));create_excel_pie_chart(ws, member_of, min_col=4, max_col=5, chart_location="F16")
def split_and_explode(df, column, delimiter=';'):s = df[column].str.split(delimiter).apply(pd.Series, 1).stack();s.index = s.index.droplevel(-1);s.name = column;return df.drop(columns=column).join(s)
def get_responsibility_and_member_of_data(df):responsibilities = df['RESPONSIBILITY_NAME'].value_counts().reset_index();responsibilities.columns = ['RESPONSIBILITY_NAME', 'COUNTS'];member_of_df = split_and_explode(df, 'MEMBER_OF');member_of = member_of_df['MEMBER_OF'].value_counts().reset_index();member_of.columns = ['MEMBER_OF', 'COUNTS_MEMBER_OF'];return responsibilities, member_of
```
```python
import pandas as pd;import openpyxl as pyxl;import Excel_Functions as ef;import tkinter as tk;from time import sleep;from GUI import GUI;from sys import exit;from Combiner import merge_files, delete_temp
def main(EPGA_File, AD_File, user_percent, delete_combined, progress, status):
    DEFAULT_PERCENT = 0.07;pd.set_option('display.max_colwidth', None)
    try:fileName = merge_files(EPGA_File, AD_File, 'combined.xlsx');progress['value'] = 10
    except PermissionError:print(f"Permission denined when trying to access one of the files {EPGA_File} or {AD_File}");status.set("Error");exit()
    except UnicodeDecodeError:print("Unicode decode error.");status.set("Error");exit()
    except FileNotFoundError:print("One or more of the files could not be found.");status.set("Error");exit()
    try:df = pd.read_excel(fileName);progress['value'] = 20
    except Exception as e: print(f"Error reading the merged Excel file! Details: {e}");status.set("Error");exit()
    if user_percent == "": user_percent = DEFAULT_PERCENT
    else:
        try:
            if int(user_percent) < 100:user_percent = abs(float(user_percent) / 100.00)
            else:print("Percent was greater than 100.\nResorting to default.");user_percent = DEFAULT_PERCENT
        except ValueError:status.set("Error");print("Input value error, resorting to default");user_percent = DEFAULT_PERCENT
        except Exception as e:status.set("Error");print(f"An unknown error occured! Details: {e}");print("Resorting to default value and attempting to continue...");user_percent = DEFAULT_PERCENT
    department_dfs = {department:df[df['DEPARTMENT'] == department] for department in df['DEPARTMENT'].drop_duplicates().values};progress['value'] = 30;status.set("Calculating percentages...")
    try:counts = df.groupby(['DEPARTMENT', 'JOB_TITLE', 'RESPONSIBILITY_NAME']).size().reset_index(name='counts');total_counts = counts.groupby(['DEPARTMENT', 'JOB_TITLE'])['counts'].sum().reset_index(name='total_counts');counts = pd.merge(counts, total_counts, on=['DEPARTMENT', 'JOB_TITLE']);counts['percentage'] = counts['counts'] / counts['total_counts'];outliers = counts[counts['percentage'] < user_percent]
    except Exception as e:status.set("Error");print(f"Error calculating counts and percentages! Details: {e}");exit()
    progress['value'] = 40
    outlier_users_list = [{ 'USER_NAME': user, 'DEPARTMENT': outlier['DEPARTMENT'],'JOB_TITLE': outlier['JOB_TITLE'], 'RESPONSIBILITY_NAME': outlier['RESPONSIBILITY_NAME'],'PERCENTAGE': round(outlier['percentage']*100,2)} for _, outlier in outliers.iterrows() for user in df[(df['DEPARTMENT'] == outlier['DEPARTMENT']) & (df['JOB_TITLE'] == outlier['JOB_TITLE']) & (df['RESPONSIBILITY_NAME'] == outlier['RESPONSIBILITY_NAME'])]['USER_NAME']]
    outlier_users = pd.DataFrame(outlier_users_list);progress['value'] = 50
    non_outlier_list = [{'DEPARTMENT': row['DEPARTMENT'],'JOB_TITLE': row['JOB_TITLE'], 'RESPONSIBILITY_NAME': row['RESPONSIBILITY_NAME'],'PERCENTAGE': round(row['percentage']*100,2)} for _, row in counts.iterrows() if not ((outliers['DEPARTMENT'] == row['DEPARTMENT']) & (outliers['JOB_TITLE'] == row['JOB_TITLE']) & (outliers['RESPONSIBILITY_NAME'] == row['RESPONSIBILITY_NAME'])).any()]
    non_outliers = pd.DataFrame(non_outlier_list);progress['value'] = 60;status.set("Preparing Excel workbook...")
    try:wb = pyxl.Workbook();wb.remove(wb.active);outliers_sheet = wb.create_sheet(title='Outliers');ef.append_dataframe_to_sheet(outliers_sheet, outlier_users, start_row=1, start_col=1);ef.adjust_column_width(outliers_sheet, {'A': 15, 'B': 15, 'C': 35, 'D': 42, 'E': 12});ef.align_cells(outliers_sheet, ['A', 'B', 'C', 'D'], ef.Alignment(horizontal='center'));non_outliers_sheet = wb.create_sheet(title='Non-Outliers');ef.append_dataframe_to_sheet(non_outliers_sheet, non_outliers, start_row=1, start_col=1);ef.adjust_column_width(non_outliers_sheet, {'A': 15, 'B': 35, 'C': 32, 'D': 12});ef.align_cells(non_outliers_sheet, ['A', 'B', 'C', 'D'], ef.Alignment(horizontal='center'))
    except Exception as e:status.set("Error");print(f"Error preparing Excel workbook! Details: {e}");exit()
    ef.create_job_title_sheets_and_charts(df, wb);status.set("Saving Excel workbook...");progress['value'] = 70
    try:wb.save("analysis.xlsx")
    except PermissionError:print("Permission denied when trying to save results to file!");exit()
    except Exception as e:status.set("Error");print(f"Error saving file! Details: {e}");delete_temp('combined.xlsx');exit()
    progress['value'] = 80
    if delete_combined:status.set("Cleaning up...");delete_temp('combined.xlsx');sleep(0.25)
    progress['value'] = 100;status.set("All tasks completed.")
root = tk.Tk();gui = GUI(root, main);root.mainloop()
```
For each job title a new sheet is created. In these sheets, there is the RESPONSIBILITY_NAME and the MEMBER_OF columns. Change the code to where the data is grouped OFFICENAME_RESPONSIBILITY_NAMEs and OFFICENAME_MEMBER_OF within the Job Title sheets. We need to create new DataFrames for each office. This needs to be done dynamically as well because the number and names of the offices may differ over time and datasets.